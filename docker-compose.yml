version: '3.8'

services:
  # 前端服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "80:80"
    environment:
      - NODE_ENV=production
    depends_on:
      - backend
    networks:
      - app-network

  # 后端服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "7001:7001"
    environment:
      - NODE_ENV=production
      - PORT=7001
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=blindbox
      - DB_PASSWORD=blindbox123
      - DB_NAME=blindbox_prod
      - JWT_SECRET=${JWT_SECRET:-your-jwt-secret-here}
      - FRONTEND_URL=http://localhost
    depends_on:
      - postgres
      - redis
    networks:
      - app-network
    volumes:
      - ./backend/logs:/app/logs

  # 数据库服务
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=blindbox
      - POSTGRES_PASSWORD=blindbox123
      - POSTGRES_DB=blindbox_prod
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - app-network

  # Redis 服务 (用于缓存和会话)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    command: redis-server --appendonly yes

  # Nginx 反向代理 (可选)
  nginx:
    image: nginx:alpine
    ports:
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - app-network

volumes:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge
